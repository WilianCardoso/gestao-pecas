/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import DAO.FornecedorDAO;
import DAO.PecaDAO;
import DAO.UsuarioDAO;
import gestaopecas.Fornecedor;
import gestaopecas.Peca;
import gestaopecas.Usuario;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cardo
 */
public class TelaListar extends javax.swing.JFrame {

    private String origem;

    /**
     * Creates new form TelaListar2
     */
    public TelaListar(String origem) {
        this.origem = origem; // Define a origem
        initComponents();

    }

    private TelaListar() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtAlterar = new javax.swing.JButton();
        jbtExcluir = new javax.swing.JButton();
        jbtVoltar = new javax.swing.JButton();
        jbtRelatorio = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbListar = new javax.swing.JTable();
        jbtListar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tela de Listagem");

        jbtAlterar.setText("Alterar");
        jbtAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtAlterarActionPerformed(evt);
            }
        });

        jbtExcluir.setText("Excluir");
        jbtExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtExcluirActionPerformed(evt);
            }
        });

        jbtVoltar.setText("Voltar");
        jbtVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtVoltarActionPerformed(evt);
            }
        });

        jbtRelatorio.setText("Relatório");
        jbtRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtRelatorioActionPerformed(evt);
            }
        });

        jtbListar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Id", "Nome", "Senha", "Tipo Usuário"
            }
        ));
        jScrollPane2.setViewportView(jtbListar);

        jbtListar.setText("Listar");
        jbtListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtListarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dubai Medium", 0, 24)); // NOI18N
        jLabel1.setText("Listagem");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jbtRelatorio)
                        .addGap(18, 18, 18)
                        .addComponent(jbtAlterar)
                        .addGap(18, 18, 18)
                        .addComponent(jbtExcluir)
                        .addGap(18, 18, 18)
                        .addComponent(jbtListar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jbtVoltar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jbtVoltar)
                .addGap(3, 3, 3)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtRelatorio)
                    .addComponent(jbtAlterar)
                    .addComponent(jbtExcluir)
                    .addComponent(jbtListar))
                .addGap(19, 19, 19)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtListarActionPerformed
        DefaultTableModel modelo;
        // Verifica a origem e configura as colunas correspondentes
        if ("usuario".equals(origem)) {
            modelo = new DefaultTableModel(
                    new Object[][]{}, // Dados inicialmente vazios
                    new String[]{"ID", "Nome", "Senha", "Tipo de Usuário"} // Cabeçalhos das colunas
            );

            jtbListar.setModel(modelo); // Define o modelo da tabela

            UsuarioDAO usuarioDAO = new UsuarioDAO();
            List<Usuario> usuarios = usuarioDAO.getUsuarios();

            if (usuarios == null || usuarios.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Não há usuários cadastrados no sistema.");
                return;
            }
            for (Usuario usuario : usuarios) {
                modelo.addRow(new Object[]{
                    usuario.getId(),
                    usuario.getNome(),
                    usuario.getSenha(),
                    usuario.isTipo_usuario() ? "Admin" : "Funcionário"
                });
            }
        } else if ("peca".equals(origem)) {
            modelo = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{"Id","Código", "Nome", "Quantidade", "Preço"}
            );
            jtbListar.setModel(modelo);
            PecaDAO pecaDAO = new PecaDAO();
            List<Peca> pecas = pecaDAO.getPecas();

            if (pecas == null || pecas.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Não há peças cadastradas no sistema.");
                return;
            }
            for (Peca peca : pecas) {
                modelo.addRow(new Object[]{
                    peca.getId(),
                    peca.getCod(),
                    peca.getNome(),
                    peca.getQntdEstoque(),
                    peca.getPreco()
                });
            }
        } else if ("fornecedor".equals(origem)) {
            modelo = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{"ID", "Nome", "CNPJ/CPF", "Telefone", "Email", "Endereço"}
            );
            jtbListar.setModel(modelo);
            FornecedorDAO fornecedorDAO = new FornecedorDAO();
            List<Fornecedor> fornecedores = fornecedorDAO.getFornecedores();

            if (fornecedores == null || fornecedores.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Não há fornecedores cadastrados no sistema.");
                return;
            }

            for (Fornecedor fornecedor : fornecedores) {
                modelo.addRow(new Object[]{
                    fornecedor.getId(),
                    fornecedor.getNome(),
                    fornecedor.getCnpj_cpf(),
                    fornecedor.getTelefone(),
                    fornecedor.getEmail(),
                    fornecedor.getEndereco()
                });
            }
        }
    }//GEN-LAST:event_jbtListarActionPerformed

    private void jbtVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtVoltarActionPerformed
        // TODO add your handling code here:
        dispose();
        TelaPrincipal tela = new TelaPrincipal();
        tela.setVisible(true);
    }//GEN-LAST:event_jbtVoltarActionPerformed

    private void jbtExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtExcluirActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = jtbListar.getSelectedRow(); // Obtém a linha selecionada
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um registro para excluir.");
            return; // Interrompe se nenhuma linha for selecionada
        }

        // Obtém o ID (primeira coluna da tabela, que deve ser o ID)
        int id = Integer.parseInt(jtbListar.getValueAt(linhaSelecionada, 0).toString());

        // Verifica a origem e executa a exclusão
        if ("usuario".equals(origem)) {
            UsuarioDAO usuarioDAO = new UsuarioDAO();
            usuarioDAO.excluirUsuario(id); // Método que exclui o usuário
        } else if ("peca".equals(origem)) {
            PecaDAO pecaDAO = new PecaDAO();
            pecaDAO.excluirPeca(id); // Método que exclui a peça
        } else if ("fornecedor".equals(origem)) {
            FornecedorDAO fornecedorDAO = new FornecedorDAO();
            fornecedorDAO.excluirFornecedor(id); // Método que exclui o fornecedor
        }

    }//GEN-LAST:event_jbtExcluirActionPerformed

    private void jbtAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtAlterarActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = jtbListar.getSelectedRow(); // Obtém a linha selecionada
        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um registro para alterar.");
            return; // Interrompe se nenhuma linha for selecionada
        }

        // Desbloqueia as células para edição
        jtbListar.setEnabled(true); // Permite editar a tabela
        jbtAlterar.addActionListener(e -> atualizarRegistro(linhaSelecionada)); // Ação de atualização
    }//GEN-LAST:event_jbtAlterarActionPerformed

    private void jbtRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtRelatorioActionPerformed
        // TODO add your handling code here:
        dispose();
        TelaHistMov tela = new TelaHistMov();
        tela.setVisible(true);
    }//GEN-LAST:event_jbtRelatorioActionPerformed

    private void atualizarRegistro(int linhaSelecionada) {
        // Obtém os dados da linha selecionada
        int id = Integer.parseInt(jtbListar.getValueAt(linhaSelecionada, 0).toString());
        String nome = jtbListar.getValueAt(linhaSelecionada, 1).toString();

        // Verifica a origem e chama o método de atualização correspondente
        if ("usuario".equals(origem)) {
            String senha = jtbListar.getValueAt(linhaSelecionada, 2).toString();
            boolean tipoUsuario = "Admin".equals(jtbListar.getValueAt(linhaSelecionada, 3).toString());

            // Atualiza no banco de dados
            UsuarioDAO usuarioDAO = new UsuarioDAO();
            usuarioDAO.alterarUsuario(id, nome, senha, tipoUsuario);
        } else if ("peca".equals(origem)) {
            int quantidade = Integer.parseInt(jtbListar.getValueAt(linhaSelecionada, 2).toString());

            // Atualiza no banco de dados
            PecaDAO pecaDAO = new PecaDAO();
            pecaDAO.alterarPeca(nome, quantidade);
        } else if ("fornecedor".equals(origem)) {
            String telefone = jtbListar.getValueAt(linhaSelecionada, 3).toString();
            String email = jtbListar.getValueAt(linhaSelecionada, 4).toString();
            String endereco = jtbListar.getValueAt(linhaSelecionada, 5).toString();

            // Atualiza no banco de dados
            FornecedorDAO fornecedorDAO = new FornecedorDAO();
            fornecedorDAO.alterarFornecedor(nome, telefone, email, endereco);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaListar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaListar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtAlterar;
    private javax.swing.JButton jbtExcluir;
    private javax.swing.JButton jbtListar;
    private javax.swing.JButton jbtRelatorio;
    private javax.swing.JButton jbtVoltar;
    private javax.swing.JTable jtbListar;
    // End of variables declaration//GEN-END:variables
}
